/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Ti√£o Carreiro - Api
 * OpenAPI spec version: 0.0.1
 */
import type {
  AddMusicRequest,
  AuthLoginRequest,
  AuthRegisterRequest,
  AuthResource,
  MusicGetPendingMusics200,
  MusicGetPendingMusicsParams,
  MusicIndex200,
  MusicIndexParams,
  MusicResource
} from '../model';

import { customInstance } from './mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];


  /**
 * @summary Login user and create token
 */
export const authLogin = (
    authLoginRequest: AuthLoginRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AuthResource>(
      {url: `/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authLoginRequest
    },
      options);
    }
  
/**
 * @summary Register new user and create token
 */
export const authRegister = (
    authRegisterRequest: AuthRegisterRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<AuthResource>(
      {url: `/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authRegisterRequest
    },
      options);
    }
  
/**
 * @summary Get list of top musics
 */
export const musicIndex = (
    params?: MusicIndexParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MusicIndex200>(
      {url: `/musics`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Add a new music
 */
export const musicStore = (
    addMusicRequest: AddMusicRequest,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MusicResource>(
      {url: `/musics`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addMusicRequest
    },
      options);
    }
  
/**
 * @summary Get list of pending musics
 */
export const musicGetPendingMusics = (
    params?: MusicGetPendingMusicsParams,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MusicGetPendingMusics200>(
      {url: `/musics/pending`, method: 'GET',
        params
    },
      options);
    }
  
/**
 * @summary Approve music
 */
export const musicApprove = (
    musicId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      return customInstance<MusicResource>(
      {url: `/musics/approve/${musicId}`, method: 'PATCH'
    },
      options);
    }
  
export type AuthLoginResult = NonNullable<Awaited<ReturnType<typeof authLogin>>>
export type AuthRegisterResult = NonNullable<Awaited<ReturnType<typeof authRegister>>>
export type MusicIndexResult = NonNullable<Awaited<ReturnType<typeof musicIndex>>>
export type MusicStoreResult = NonNullable<Awaited<ReturnType<typeof musicStore>>>
export type MusicGetPendingMusicsResult = NonNullable<Awaited<ReturnType<typeof musicGetPendingMusics>>>
export type MusicApproveResult = NonNullable<Awaited<ReturnType<typeof musicApprove>>>
